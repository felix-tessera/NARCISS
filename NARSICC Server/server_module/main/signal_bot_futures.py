import ccxt
import pandas as pd
import pandas_ta as ta
from pybit.unified_trading import HTTP
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API ---
API_KEY = "w6FuoaEMJvfJVCgspY"
API_SECRET = "ePuwMYEgfNo7p4BZl47IJE5wedV6Q0FfcLvY"
SYMBOL = "XRP/USDT"
LEVERAGE = "5"
ORDER_QTY = "5"  # –û–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏
EMA_LENGTH = 100  # –î–ª–∏–Ω–∞ EMA
TP_PCT = 0.0075     # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
SL_PCT = 0.1     # –°—Ç–æ–ø-–ª–æ—Å—Å

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Bybit Unified API ---
session = HTTP(api_key=API_KEY, api_secret=API_SECRET)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ CCXT (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö) ---
exchange = ccxt.bybit({
    "apiKey": API_KEY,
    "secret": API_SECRET,
    "enableRateLimit": True,
    "options": {
        "defaultType": "future"
    }
})

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ OHLCV ---
def fetch_ohlcv(symbol, timeframe='1m', limit=100):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=["timestamp", "open", "high", "low", "close", "volume"])
    df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
    return df

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def log(message):
    print(f"[LOG] {message}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ ---
def check_balance(min_required=10):
    try:
        balances = session.get_wallet_balance(accountType="UNIFIED")
        usdt_data = next(
            (item for item in balances['result']['list'][0]['coin'] if item['coin'] == 'USDT'),
            None
        )
        if usdt_data is None:
            log("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ USDT –≤ –∫–æ—à–µ–ª—å–∫–µ.")
            return False
        available_balance = float(usdt_data['walletBalance'])
        log(f"–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: {available_balance:.2f} USDT")
        return available_balance >= min_required
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return False

def is_position_open():
    try:
        positions = session.get_positions(category="linear", symbol=SYMBOL.replace("/", ""))
        pos_data = positions['result']['list']
        for pos in pos_data:
            size = float(pos['size'])
            if size != 0:
                log(f"–£–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è: {pos['side']} —Å –æ–±—ä—ë–º–æ–º {size}")
                return True
        return False
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
        return False

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ ---
def check_indicators():
    try:
        df_1m = fetch_ohlcv(SYMBOL, "1m")
        df_5m = fetch_ohlcv(SYMBOL, "5m")
        df_30m = fetch_ohlcv(SYMBOL, "30m")
        df_1h = fetch_ohlcv(SYMBOL, "1h")
        df_1m["ema"] = ta.ema(df_1m["close"], length=EMA_LENGTH)
        ema = df_1m["ema"].iloc[-1]
        close = df_1m["close"].iloc[-1]

        rsi_1m = ta.rsi(df_1m["close"], length=14).iloc[-1]
        rsi_5m = ta.rsi(df_5m["close"], length=14).iloc[-1]
        rsi_30m = ta.rsi(df_30m["close"], length=14).iloc[-1]
        cci_1h = ta.cci(df_1h["high"], df_1h["low"], df_1h["close"], length=20).iloc[-1]

        return {
            "rsi_1m": rsi_1m,
            "rsi_5m": rsi_5m,
            "rsi_30m": rsi_30m,
            "cci_1h": cci_1h,
            "ema": ema,
            "price": close
        }
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
        return None
    
# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ—á–∞ ---
def set_leverage():
    try:
        session.set_leverage(
            category="linear",
            symbol=SYMBOL.replace("/", ""),
            buy_leverage=LEVERAGE,
            sell_leverage=LEVERAGE
        )
        log(f"–ü–ª–µ—á–æ {LEVERAGE}x —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è {SYMBOL}")
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–µ—á–∞: {e}")

# --- –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ ---
def open_trade(side, price):
    entry_price = round(price, 4)
    tp = round(entry_price * (1 + TP_PCT) if side == "Buy" else entry_price * (1 - TP_PCT), 4)
    sl = round(entry_price * (1 - SL_PCT) if side == "Buy" else entry_price * (1 + SL_PCT), 4)

    log(f"–û—Ç–∫—Ä—ã—Ç–∏–µ {side} –ø–æ —Ü–µ–Ω–µ {entry_price}, TP: {tp}, SL: {sl}")

    order = session.place_order(
        category="linear",
        symbol=SYMBOL.replace("/", ""),
        side=side,
        order_type="Market",
        qty=str(ORDER_QTY),
        time_in_force="GoodTillCancel",
        take_profit=str(tp),
        stop_loss=str(sl)
    )
    log(f"–û—Ç–∫—Ä—ã—Ç –æ—Ä–¥–µ—Ä ID: {order['result']['orderId']}")
    return order

# --- –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ---
def run_bot():
    set_leverage()
    while True:
        if is_position_open():
            log("–ü—Ä–æ–ø—É—Å–∫, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–æ–∑–∏—Ü–∏—è.")
            time.sleep(60)
            continue
        indicators = check_indicators()
        if indicators is None:
            log("–û—à–∏–±–∫–∞ –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, –ø—Ä–æ–ø—É—Å–∫...")
            time.sleep(60)
            continue

        rsi1 = indicators["rsi_1m"]
        rsi5 = indicators["rsi_5m"]
        rsi30 = indicators["rsi_30m"]
        cci1h = indicators["cci_1h"]
        ema = indicators["ema"]
        price = indicators["price"]

        log(f"–¶–µ–Ω–∞: {price:.4f}, EMA: {ema:.4f}")
        log(f"RSI: {rsi1:.1f}, {rsi5:.1f}, {rsi30:.1f} | CCI: {cci1h:.1f}")

        if not check_balance(min_required=price * int(ORDER_QTY) / int(LEVERAGE)):
            log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –û–∂–∏–¥–∞–Ω–∏–µ...")
            time.sleep(60)
            continue

        # üìà –£—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–Ω–≥–∞
        if price > ema and rsi1 < 55 and rsi5 < 55 and rsi30 < 65 and cci1h < 85:
            open_trade("Buy", price)

        # üìâ –£—Å–ª–æ–≤–∏—è –¥–ª—è —à–æ—Ä—Ç–∞
        elif price < ema and rsi1 > 45 and rsi5 > 45 and rsi30 > 35 and cci1h > -85:
            open_trade("Sell", price)
        else:
            log("–ù–µ—Ç —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—Ö–æ–¥–∞")

        time.sleep(60)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    run_bot()
